// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Vote
#pragma kernel Scan
#pragma kernel ScanGroupSums
#pragma kernel Compact

#define NUM_GROUP_THREADS_X 64
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
StructuredBuffer<float4> PositionsBuffer;
RWStructuredBuffer<int> VoteBuffer;
RWStructuredBuffer<int> ScanBuffer;
RWStructuredBuffer<int> GroupSumsBuffer;
RWStructuredBuffer<int> GroupSumsInBuffer;
RWStructuredBuffer<int> GroupSumsOutBuffer;
RWStructuredBuffer<float4> CulledGrassBuffer;

RWStructuredBuffer<int> GrassCounter;

groupshared uint temp[2 * NUM_GROUP_THREADS_X];
groupshared uint groupSumsTemp[2 * 1024];
float4x4 MATRIX_VP;
float3 CameraPosition;
float Distance;
int NumGroups;

bool InRange(float val, float min, float max)
{
    return val < max && val > min;
}

[numthreads(128, 1, 1)]
void Vote(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    int globalID = int(dispatchThreadID.x);
    float4 pos = float4(PositionsBuffer[globalID].xyz, 1.0f);
    float4 viewSpace = mul(MATRIX_VP, pos);
    float3 clipSpace = viewSpace.xyz;
    clipSpace /= -viewSpace.w;
    clipSpace.x = clipSpace.x / 2.0f + 0.5f;
    clipSpace.y = clipSpace.y / 2.0f + 0.5f;
    clipSpace.z = -viewSpace.w;
    bool inView = clipSpace.x < -0.2f || clipSpace.x > 1.2f || clipSpace.z <= -0.1f ? 0 : 1;
    bool inDistance = distance(CameraPosition, pos.xyz) < 100;
    VoteBuffer[globalID] = inView * inDistance;
}

[numthreads(NUM_GROUP_THREADS_X,1,1)]
void Scan(uint3 dispatchThreadID : SV_DispatchThreadID, uint3 _groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID)
{
    int globalID = int(dispatchThreadID.x);
    int localID = int(groupThreadID.x);
    int groupID = int(_groupID.x);
    
    int offset = 1;
    int numElements = 2 * NUM_GROUP_THREADS_X;
    temp[2 * localID] = VoteBuffer[2 * globalID];
    temp[2 * localID + 1] = VoteBuffer[2 * globalID + 1];
    int d;
    
    GroupMemoryBarrierWithGroupSync();
    for (d = numElements >> 1; d > 0; d >>= 1)
    {
        GroupMemoryBarrierWithGroupSync();
        if (localID < d)
        {
            int ai = offset * (2 * localID + 1) - 1;
            int bi = offset * (2 * localID + 2) - 1;
            temp[bi] += temp[ai];
        }
        offset *= 2;
    } 
    
    if (globalID == 0)
    {
        GroupSumsBuffer[groupID] = temp[numElements - 1];
        temp[numElements - 1] = 0;
    }
    
    for (d = 1; d < numElements; d <<= 1)
    {
        offset >>= 1;
        GroupMemoryBarrierWithGroupSync();
        if (localID < d)
        {
            int ai = offset * (2 * localID + 1) - 1;
            int bi = offset * (2 * localID + 2) - 1;
            uint t = temp[ai];
            temp[ai] = temp[bi];
            temp[bi] += t;
        }
    }
    GroupMemoryBarrierWithGroupSync();
    
    ScanBuffer[2 * globalID] = temp[2 * localID];
    ScanBuffer[2 * globalID + 1] = temp[2 * localID + 1];
}


[numthreads(1024, 1, 1)]
void ScanGroupSums(uint3 dispatchThreadID : SV_DispatchThreadID, uint3 groupThreadID : SV_GroupThreadID)
{
    int globalID = int(dispatchThreadID.x);
    int localID = int(groupThreadID.x);
    
    int offset = 1;
    groupSumsTemp[2 * localID] = GroupSumsInBuffer[2 * globalID];
    groupSumsTemp[2 * localID + 1] = GroupSumsInBuffer[2 * globalID + 1];
    int d;
    
    GroupMemoryBarrierWithGroupSync();
    for (d = NumGroups >> 1; d > 0; d >>= 1)
    {
        GroupMemoryBarrierWithGroupSync();
        if (localID < d)
        {
            int ai = offset * (2 * localID + 1) - 1;
            int bi = offset * (2 * localID + 2) - 1;
            groupSumsTemp[bi] += groupSumsTemp[ai];
        }
        offset *= 2;
    }
    
    if (globalID == 0)
        groupSumsTemp[NumGroups - 1] = 0;
    
    for (d = 1; d < NumGroups; d <<= 1)
    {
        offset >>= 1;
        GroupMemoryBarrierWithGroupSync();
        if (globalID < d)
        {
            int ai = offset * (2 * localID + 1) - 1;
            int bi = offset * (2 * localID + 2) - 1;
            uint t = groupSumsTemp[ai];
            groupSumsTemp[ai] = groupSumsTemp[bi];
            groupSumsTemp[bi] += t;
        }
    }
    GroupMemoryBarrierWithGroupSync();
    
    GroupSumsOutBuffer[2 * globalID] = groupSumsTemp[2 * globalID];
    GroupSumsOutBuffer[2 * globalID + 1] = groupSumsTemp[2 * globalID + 1];
}


[numthreads(128, 1, 1)]
void Compact(uint3 dispatchThreadID : SV_DispatchThreadID, uint3 groupID : SV_GroupID)
{
    int globalID = int(dispatchThreadID.x);
    uint groupSum = groupID.x > 0 ? GroupSumsBuffer[groupID.x] : 0;
    if (VoteBuffer[globalID] == 1)
    {
        InterlockedAdd(GrassCounter[0], 1);
        CulledGrassBuffer[ScanBuffer[globalID] + groupSum] = PositionsBuffer[globalID];
    }
}