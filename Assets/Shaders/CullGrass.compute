#pragma kernel Vote
#pragma kernel Scan
#pragma kernel ScanGroupSums
#pragma kernel Compact
#pragma kernel ResetCount

#define NUM_THREAD_GROUPS_X 64

RWStructuredBuffer<float4> PositionsBuffer;
RWStructuredBuffer<uint> VoteBuffer;
RWStructuredBuffer<uint> ScanBuffer;
RWStructuredBuffer<uint> GroupSumsBuffer;
RWStructuredBuffer<uint> GroupSumsInBuffer;
RWStructuredBuffer<uint> GroupSumsOutBuffer;
RWStructuredBuffer<float4> CulledGrassBuffer;

RWStructuredBuffer<int> GrassCounter;

float4x4 MATRIX_VP;
int NumGroups;
groupshared uint temp[2 * NUM_THREAD_GROUPS_X];
groupshared uint grouptemp[2 * 1024];
float Distance;
float3 CameraPosition;

[numthreads(128, 1, 1)]
void Vote(uint3 id : SV_DispatchThreadID) {
    float4 position = float4(PositionsBuffer[id.x].xyz, 1.0f);
    
    float4 viewspace = mul(MATRIX_VP, position);

    float3 clipspace = viewspace.xyz;
    clipspace /= -viewspace.w;

    clipspace.x = clipspace.x / 2.0f + 0.5f;
    clipspace.y = clipspace.y / 2.0f + 0.5f;
    clipspace.z = -viewspace.w;

    bool inView = clipspace.x < -0.2f || clipspace.x > 1.2f || clipspace.z <= -0.1f ? 0 : 1;
    bool withinDistance = distance(CameraPosition, position.xyz) < Distance;

    VoteBuffer[id.x] = inView * withinDistance;
}

// From GPU Gems Chapter 39 'Parallel Prefix Sum (Scan) with CUDA'
[numthreads(NUM_THREAD_GROUPS_X, 1, 1)]
void Scan(uint3 id : SV_DISPATCHTHREADID, uint groupIndex : SV_GROUPINDEX, uint3 _groupID : SV_GROUPID, uint3 groupThreadID : SV_GROUPTHREADID) {
    int tid = (int) id.x;
    int groupTID = (int) groupThreadID.x;
    int groupID = (int) _groupID.x;

    int offset = 1;
    temp[2 * groupTID] = VoteBuffer[2 * tid];
    temp[2 * groupTID + 1] = VoteBuffer[2 * tid + 1];
    int d;
    int numElements = 2 * NUM_THREAD_GROUPS_X;

    for (d = numElements >> 1; d > 0; d >>= 1) {
        GroupMemoryBarrierWithGroupSync();

        if (groupTID < d) {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            temp[bi] += temp[ai];
        }

        offset *= 2;
    }

    if (groupTID == 0) {
        GroupSumsBuffer[_groupID.x] = temp[numElements - 1];
        temp[numElements - 1] = 0;
    }

    for (d = 1; d < numElements; d *= 2) {
        offset >>= 1;

        GroupMemoryBarrierWithGroupSync();
        if (groupTID < d) {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            int t = temp[ai];
            temp[ai] = temp[bi];
            temp[bi] += t;
        }
    }

    GroupMemoryBarrierWithGroupSync();

    ScanBuffer[2 * tid] = temp[2 * groupTID];
    ScanBuffer[2 * tid + 1] = temp[2 * groupTID + 1];
}

// From GPU Gems Chapter 39 'Parallel Prefix Sum (Scan) with CUDA'
[numthreads(1024, 1, 1)]
void ScanGroupSums(uint3 id : SV_DISPATCHTHREADID, uint groupIndex : SV_GROUPINDEX, uint3 _groupID : SV_GROUPID, uint3 groupThreadID : SV_GROUPTHREADID) {
    int tid = (int) id.x;
    int groupTID = (int) groupThreadID.x;
    int groupID = (int) _groupID.x;

    int offset = 1;
    grouptemp[2 * groupTID] = GroupSumsInBuffer[2 * tid];
    grouptemp[2 * groupTID + 1] = GroupSumsInBuffer[2 * tid + 1];
    int d;

    for (d = NumGroups >> 1; d > 0; d >>= 1) {
        GroupMemoryBarrierWithGroupSync();

        if (groupTID < d) {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            grouptemp[bi] += grouptemp[ai];
        }

        offset *= 2;
    }

    if (tid == 0)
        grouptemp[NumGroups - 1] = 0;

    for (d = 1; d < NumGroups; d *= 2) {
        offset >>= 1;

        GroupMemoryBarrierWithGroupSync();
        if (tid < d) {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            int t = grouptemp[ai];
            grouptemp[ai] = grouptemp[bi];
            grouptemp[bi] += t;
        }
    }

    GroupMemoryBarrierWithGroupSync();

    GroupSumsOutBuffer[2 * tid] = grouptemp[2 * tid];
    GroupSumsOutBuffer[2 * tid + 1] = grouptemp[2 * tid + 1];
}

[numthreads(128, 1, 1)]
void Compact(uint3 id : SV_DISPATCHTHREADID, uint groupIndex : SV_GROUPINDEX, uint3 _groupID : SV_GROUPID, uint3 groupThreadID : SV_GROUPTHREADID) {
    uint tid = id.x;
    uint groupID = _groupID.x;
    uint groupSum = groupID.x > 0 ? GroupSumsBuffer[groupID.x] : 0;
    bool inCamera = VoteBuffer[id.x];
    
    if (inCamera == 1) {
        InterlockedAdd(GrassCounter[1], 1);
        CulledGrassBuffer[ScanBuffer[tid] + groupSum] = PositionsBuffer[tid];
    }
}

[numthreads(1, 1, 1)]
void ResetCount(uint3 id : SV_DISPATCHTHREADID)
{
    GrassCounter[0] = 0;
}